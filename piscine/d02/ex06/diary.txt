
	An interesting one. Again at the first glance seems very easy, but..
Ints value range is dependent on the system in use. Everything is fine if we pass
for example 666 to the function. What if we pass 654687796546545646? Well, it 
depends. Most likely an error occurs. Later in the future, the error doesn't neccessarily occur.
If I did this assignment with an old amiga the max/min value of int is a lot smaller
 than with my current equipment. The briefing says that all possible values inside 
int type variable must be printable. How do we find out what is the max? Testing.
Problem is that locally testing is easy, outside that it gets tricky. Locally we can just
++; until something strange happens while every time printing the value. Recursion 
is the devils invention. Good thing we are in the league with satan. Most likely
I'm going to just print out an acceptable answer.
	
	I watched a video about macros. There are special reserved macros for time,
date and other stuff. There also might be for system definition.

	This still doesn't fix our problem. We can display but the int range of 
our own system. I believe that the solution lies in cutting the int to pieces and 
printing only a portion at a time. How? Some to no idea. Since we can only use 
ft_putchar that prints 1 char at a time, we have to do wizardy anyway.

	We can keep dividing the int by 10 recursively and when the local value hits
 below 10 we take the modulo % of it and putchar the MF(most facinating). By the
way, modulo in c is not the same as in the world outside c. It can be negative 
for some reason without having 2 values.

	Now there is a testing123.c that demonstrates a bit on the behaviour of
ints. My computer allows me to define a 10 digit int. There are cheats on google
to find out what your int range is. If I try to assign a too large int in my 
function, the compiler tells me that it's not a good idea, but compiles unless
I use added options on the compiler. When I use scanf, no warnings occur.
This is because the compiler makes the program and there are no security measures
for user trolling/incompetence. For sure there is a way to block this other than
never using scanf, but I don't know it yet. What happens when I assign an 11
digits long int via scanf? Overflow. What does that mean? Hopefully nothing
important because I don't know yet :D.
	I have read about overflows, but some of the stuff I've read are incorrect.
There is info that cancels each other out and there is info that says that something
weird happens. For now to me, something weird happens and I'll get back to it later. If you run out of int space, you can use "long int x;" to be able to store
bigger numbers. long long int also is good. Double can be used also and it gives
decimals too.

	https://www.learncpp.com/cpp-tutorial/unsigned-integers-and-why-to-avoid-them/

	Reading the comments, something popped in to my head. Can we give the computer
instructions if we just give them in the right form? If you use scanf. The program
has already compiled and been made. This means it does the printf while running
since it can't know what we are going to type as input. Based on the input, it 
does stuff for example prints what we typed. From what I know from compilers,
a lot of stuff is going on what we can't see. The commands are transformed in
to another language that the computer understands and then acts on it.
If we know that language, we should be able to input our own "cheat codes" like
in 8-bit nintendo or doom. Can we command the computer to work in a different way
that was originally intended? IDKFA! IDCLIP! IDDQD! Forget about C, I want to go
deeper.

	Ok, calm down.. I've read more comments on the site. A lot better than
any forum I've ever stumbled on. Thank you mod! There is a lot of say about the use
of unsigned ints (always positive, predictable out of bounds behaviour, error
prone, can hold bigger +0 values..). Maybe, just maybe there is a better explanation
than old systems for the existence of these. When using comparison, the signed int
will be converted to a signed int. The computer is stupid that way. It can not
compare the two otherwise. Some newer languages do this converting stuff also.
It's like comparing the value for sitting between a table and a chair. Both
are suitable, but other one is better for the job. The sittability value has
to be calculated somehow.

"From C11 6.2.5/9: "The range of nonnegative values of a signed integer type is a subrange of the corresponding unsigned integer type, and the representation of the same value in each type is the same. A computation involving unsigned operands can never overflow, because a result that cannot be represented by the resulting unsigned integer type is reduced modulo the number that is one greater than the largest value that can be represented by the resulting type.""

	Here is the answer! And I can tell you it's ! 42. Now that was the easy
part. Now to figure out how to use this info to make a function that can print 
integer values. The interweb tells us that we can use size_t. Now the problem 
arises from my lack of knowledge of bits. Back to google it is.. The world that
I used to live in doesn't exist anymore. This will take some time for sure.
Adapting a new set of rules to a number system I've used all my life is going to
be fun? hard? painful? I've done this sort of stuff before so it shouldn't be 
impossible. The thing is to trick my brain to forget the long term memory logic
behind a class called everything. Alcohol has these side effects! 
This doesn't sound such a good idea.

	The trick is to associate what you learn to something you already know.
I've done a lot of calculating and some things are an automation for me. Now 
what I need to do is break the automation without actually breaking it. The other
method is to learn by heart and brute force the info in. What a funny puzzle.
Pen and paper or the computer? What is better? There is more freedom with the
old ways, but there are some things that can be done better with the computer.
They say that the pen is mightier then the sword (a sword that cuts the laptop
in half)

	Because dealing with a problem x tomorrow is my usual approach, I'll
get back to the assignment.

	Average attention span for humanoids is about 30min. I'm overdue.
This can be increased by a bit (so funny). A video on youtube told me to count
the time of how long does it take to lose focus on a subject. For me it's about
25 seconds. Well, it's gone up from 15s so progress. After the focus is gone, 
take a break. We will be handling the command break later on.

	After taking a break I realized that sizeof(size_t) can be used to
define the absolute unsigned int size. According to the internet, this doesn't 
neccessarily correlate with the signed int range. Nice! What if we just put
sizeof(int) instead. Is there a standard? Before today I've only heard of 4
byte size integers. Maybe less coffee is better after all. I was supposed to
solve another puzzle today but forgot because got stuck on d02/ex06. I need a 
crappier computer for testing and will not settle for a virtual machine.

	Interweb tells me that when a name has _ in front of it, it is a system
action. So if there would be a command __drink_coffee, it would mean that it 
has something to do with the opeating system? Macros have them too.

	To adopt new info on computers, it's good to learn to think everything
in binary. My current system is odds. Adding a new way on top of an existing
one is going to take some time, but shouldn't be that hard if you just keep on
doing. After that the base x adoption should get easier. I just watched a 
moveie about Srinivasa Ramanujan. In the movie, a professor asks him the square
root of a big number and he answers straight away. In the bootcamp I was asked
what was 666 * 666. All I could tell was that it ended with 6. I looked up the
answer I'll forever remember it because I use memory rules. Answer is 443556.
4x4 pickups 3 times that have assault rifle magazines on on the flatbead. 
There were some talks about shunting yard algorithm that I got exited about.
That is the reason for 443 instead of 344. Also some talk about ints. int 
can't display decimals so 5.56 could't be displayed. From this I can figure out
something about my view of numbers. Instead of efficient systems, I sometimes
use memory rules. This also happens when I try to remember peoples names.

	People do these automatications a bit differently. Almost all do them
even tho they don't realize it. Adopting binary should help to adopt more.
I've tried to learn about learning a lot in the recent months. The humanoid
brain has incredible storing capasity. The thing is that we need to move the info
from our short term memory to the hard drive. The more we use the link from the
hard drive to the processing memory, it gets easier. As we age, the hard drive 
becomes corrupt. Also if we want to delete stuff, its hard, but it's a process 
that should help with learning.
